EEEEEEEE
======================================================================
ERROR: testCalculatedGradient (__main__.exactLineSearchTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "RosenbrockTest.py", line 43, in testCalculatedGradient
    gradient = op.get_gradient(f, (1,2))
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/OptimizationMethod.py", line 32, in get_gradient
    zs = np.array([function(x) for x in zip(*map(np.ravel,X))])
TypeError: f() takes exactly 2 arguments (1 given)

======================================================================
ERROR: testHessianFunctionWithGradient (__main__.exactLineSearchTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "RosenbrockTest.py", line 58, in testHessianFunctionWithGradient
    hessian = op.get_hessian(f, (1,2))
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/OptimizationMethod.py", line 44, in get_hessian
    fx = self.get_gradient(function,point)
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/OptimizationMethod.py", line 32, in get_gradient
    zs = np.array([function(x) for x in zip(*map(np.ravel,X))])
TypeError: f() takes exactly 2 arguments (1 given)

======================================================================
ERROR: testHessianFunctionWithoutGradient (__main__.exactLineSearchTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "RosenbrockTest.py", line 53, in testHessianFunctionWithoutGradient
    hessian = op.get_hessian(f, (1,2))
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/OptimizationMethod.py", line 44, in get_hessian
    fx = self.get_gradient(function,point)
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/OptimizationMethod.py", line 32, in get_gradient
    zs = np.array([function(x) for x in zip(*map(np.ravel,X))])
TypeError: f() takes exactly 2 arguments (1 given)

======================================================================
ERROR: testRosenBrockWithEasyInitialGuess (__main__.exactLineSearchTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "RosenbrockTest.py", line 68, in testRosenBrockWithEasyInitialGuess
    res = op.solve((2,2))
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/ClassicalNewton.py", line 9, in solve
    return self.classic_newton_method(initial_guess)
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/ClassicalNewton.py", line 24, in classic_newton_method
    gradient = self.get_gradient(self.problem.obj_func,x_k)
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/OptimizationMethod.py", line 32, in get_gradient
    zs = np.array([function(x) for x in zip(*map(np.ravel,X))])
TypeError: f() takes exactly 2 arguments (1 given)

======================================================================
ERROR: testRosenBrockWithHardInitialGuess (__main__.exactLineSearchTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "RosenbrockTest.py", line 73, in testRosenBrockWithHardInitialGuess
    res = op.solve((-1.2, 1))
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/ClassicalNewton.py", line 9, in solve
    return self.classic_newton_method(initial_guess)
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/ClassicalNewton.py", line 24, in classic_newton_method
    gradient = self.get_gradient(self.problem.obj_func,x_k)
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/OptimizationMethod.py", line 32, in get_gradient
    zs = np.array([function(x) for x in zip(*map(np.ravel,X))])
TypeError: f() takes exactly 2 arguments (1 given)

======================================================================
ERROR: testRosenBrockWithHardInitialGuessAndSuppliedGradient (__main__.exactLineSearchTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "RosenbrockTest.py", line 78, in testRosenBrockWithHardInitialGuessAndSuppliedGradient
    res = op.solve((-1.2, 1))
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/ClassicalNewton.py", line 9, in solve
    return self.classic_newton_method(initial_guess)
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/ClassicalNewton.py", line 27, in classic_newton_method
    hessian = self.get_hessian(self.problem.obj_func,x_k)
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/OptimizationMethod.py", line 44, in get_hessian
    fx = self.get_gradient(function,point)
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/OptimizationMethod.py", line 32, in get_gradient
    zs = np.array([function(x) for x in zip(*map(np.ravel,X))])
TypeError: f() takes exactly 2 arguments (1 given)

======================================================================
ERROR: testRosenBrockWithStandardInitialGuess (__main__.exactLineSearchTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "RosenbrockTest.py", line 63, in testRosenBrockWithStandardInitialGuess
    res = op.solve()
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/ClassicalNewton.py", line 9, in solve
    return self.classic_newton_method(initial_guess)
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/ClassicalNewton.py", line 24, in classic_newton_method
    gradient = self.get_gradient(self.problem.obj_func,x_k)
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/OptimizationMethod.py", line 32, in get_gradient
    zs = np.array([function(x) for x in zip(*map(np.ravel,X))])
TypeError: f() takes exactly 2 arguments (1 given)

======================================================================
ERROR: testSuppliedGradient (__main__.exactLineSearchTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "RosenbrockTest.py", line 48, in testSuppliedGradient
    gradient = op.get_gradient(f, (1,2))
  File "/h/d9/b/dat11ote/courses/fmnn25/FMNN25---Quasi-Newton-Methods/OptimizationMethod.py", line 32, in get_gradient
    zs = np.array([function(x) for x in zip(*map(np.ravel,X))])
TypeError: f() takes exactly 2 arguments (1 given)

----------------------------------------------------------------------
Ran 8 tests in 0.002s

FAILED (errors=8)
SurvivedToGetGradient
('x=', (0.99999499999999997, 1.999995))
('x=', (1.0, 1.999995))
('x=', (1.000005, 1.999995))
('x=', (0.99999499999999997, 2.0))
('x=', (1.0, 2.0))
('x=', (1.000005, 2.0))
('x=', (0.99999499999999997, 2.0000049999999998))
('x=', (1.0, 2.0000049999999998))
('x=', (1.000005, 2.0000049999999998))
SurvivedToGetGradient
('x=', (0.99999499999999997, 1.999995))
('x=', (1.0, 1.999995))
('x=', (1.000005, 1.999995))
('x=', (0.99999499999999997, 2.0))
('x=', (1.0, 2.0))
('x=', (1.000005, 2.0))
('x=', (0.99999499999999997, 2.0000049999999998))
('x=', (1.0, 2.0000049999999998))
('x=', (1.000005, 2.0000049999999998))
SurvivedToGetGradient
('x=', (0.99999499999999997, 1.999995))
('x=', (1.0, 1.999995))
('x=', (1.000005, 1.999995))
('x=', (0.99999499999999997, 2.0))
('x=', (1.0, 2.0))
('x=', (1.000005, 2.0))
('x=', (0.99999499999999997, 2.0000049999999998))
('x=', (1.0, 2.0000049999999998))
('x=', (1.000005, 2.0000049999999998))
SurvivedToGetGradient
('x=', (1.999995, 1.999995))
('x=', (2.0, 1.999995))
('x=', (2.0000049999999998, 1.999995))
('x=', (1.999995, 2.0))
('x=', (2.0, 2.0))
('x=', (2.0000049999999998, 2.0))
('x=', (1.999995, 2.0000049999999998))
('x=', (2.0, 2.0000049999999998))
('x=', (2.0000049999999998, 2.0000049999999998))
SurvivedToGetGradient
('x=', (-1.200005, 0.99999499999999997))
('x=', (-1.2, 0.99999499999999997))
('x=', (-1.1999949999999999, 0.99999499999999997))
('x=', (-1.200005, 1.0))
('x=', (-1.2, 1.0))
('x=', (-1.1999949999999999, 1.0))
('x=', (-1.200005, 1.000005))
('x=', (-1.2, 1.000005))
('x=', (-1.1999949999999999, 1.000005))
SurvivedToGetGradient
('x=', (-1.200005, 0.99999499999999997))
('x=', (-1.2, 0.99999499999999997))
('x=', (-1.1999949999999999, 0.99999499999999997))
('x=', (-1.200005, 1.0))
('x=', (-1.2, 1.0))
('x=', (-1.1999949999999999, 1.0))
('x=', (-1.200005, 1.000005))
('x=', (-1.2, 1.000005))
('x=', (-1.1999949999999999, 1.000005))
SurvivedToGetGradient
('x=', (-5.0000000000000004e-06, -5.0000000000000004e-06))
('x=', (0.0, -5.0000000000000004e-06))
('x=', (5.0000000000000004e-06, -5.0000000000000004e-06))
('x=', (-5.0000000000000004e-06, 0.0))
('x=', (0.0, 0.0))
('x=', (5.0000000000000004e-06, 0.0))
('x=', (-5.0000000000000004e-06, 5.0000000000000004e-06))
('x=', (0.0, 5.0000000000000004e-06))
('x=', (5.0000000000000004e-06, 5.0000000000000004e-06))
SurvivedToGetGradient
('x=', (0.99999499999999997, 1.999995))
('x=', (1.0, 1.999995))
('x=', (1.000005, 1.999995))
('x=', (0.99999499999999997, 2.0))
('x=', (1.0, 2.0))
('x=', (1.000005, 2.0))
('x=', (0.99999499999999997, 2.0000049999999998))
('x=', (1.0, 2.0000049999999998))
('x=', (1.000005, 2.0000049999999998))
